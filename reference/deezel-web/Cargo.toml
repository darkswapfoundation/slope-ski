# Deezel Web Library
#
# This crate provides web-compatible implementations of deezel-common traits
# using web-sys APIs for browser environments. It enables running deezel
# functionality in web applications and WASM environments.
#
# Key features:
# - Web-sys based JSON-RPC using fetch API
# - localStorage for storage operations
# - Web Crypto API for cryptographic operations
# - Browser-compatible networking
# - WASM-optimized implementations

[package]
name = "deezel-web"
version = "0.1.0"
edition = "2021"
description = "Web-compatible deezel library using web-sys APIs for browser environments"
authors = ["Deezel Team"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/deezel-team/deezel"
keywords = ["bitcoin", "alkanes", "smart-contracts", "wallet", "wasm", "web"]
categories = ["cryptography::cryptocurrencies", "web-programming", "wasm"]
autobins = false

[lib]
name = "deezel_web"
crate-type = ["cdylib", "rlib"]

[dependencies]
# Core deezel functionality
deezel-common = { path = "../deezel-common", default-features = false, features = ["web-compat"] }
deezel-asc = { path = "../deezel-asc" }

# Core Bitcoin functionality
bitcoin = { workspace = true }
ordinals = { workspace = true }
protorune-support = { workspace = true }

# Cryptography and wallet functionality
secp256k1 = { workspace = true }
bip39 = { workspace = true }
pbkdf2 = { workspace = true }
aes-gcm = { workspace = true }
rand = { workspace = true }
sha2 = { workspace = true }
sha3 = { workspace = true }

# Async runtime (WASM-compatible features only)
futures = { workspace = true }

# Serialization/Deserialization
serde = { workspace = true }
serde_json = { workspace = true }
serde-wasm-bindgen = "0.6"

# Error handling
anyhow = { workspace = true }
thiserror = { workspace = true }

# Logging
log = { workspace = true }

# Web-specific dependencies
gloo-timers = { version = "0.3", features = ["futures"] }

# Utilities
hex = { workspace = true }
async-trait = { workspace = true }
base64 = { workspace = true }
regex = { workspace = true }
chrono = { workspace = true }

# Alkanes-rs crates - commented out for WASM compatibility
alkanes-support = { workspace = true }
# metashrew-support = { workspace = true }
protobuf = { workspace = true }

# Web-specific dependencies
wasm-bindgen = "0.2"
wasm-bindgen-futures = "0.4"
js-sys = "0.3"
web-sys = { workspace = true, features = [
  "console",
  "Window",
  "Document",
  "Storage",
  "Request",
  "RequestInit",
  "RequestMode",
  "Response",
  "ResponseInit",
  "Headers",
  "Crypto",
  "SubtleCrypto",
  "Performance",
  "PerformanceTiming",
] }

# WASM-specific random number generation
getrandom = { version = "0.2", features = ["js"] }

# Console logging for WASM
console_error_panic_hook = { version = "0.1", optional = true }
console_log = "1.0"
wee_alloc = { version = "0.4", optional = true }

[features]
default = ["console_error_panic_hook"]
std = ["deezel-common/std"]
native-deps = ["deezel-common/native-deps"]
wasm-inspection = ["deezel-common/wasm-inspection"]
wee_alloc = ["dep:wee_alloc"]

[dev-dependencies]
wasm-bindgen-test = "0.3"
serde-wasm-bindgen = "0.6"

# Optimize for size in release builds
[profile.release]
opt-level = "s"
lto = true
codegen-units = 1

[package.metadata.wasm-pack.profile.release]
wasm-opt = ["-Os", "--enable-mutable-globals"]